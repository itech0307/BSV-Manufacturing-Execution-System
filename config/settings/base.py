"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

SITE_ID = 1

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fu5z8knr^6))fu5j7a=y%)h7=+@%$8k3sj9$1i#rd&0&gvf1&+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

env = environ.Env()
environ.Env.read_env(BASE_DIR / '.env')
# Get the domain from the environment variable
DOMAIN = env('DOMAIN')

LOGIN_URL = '/common/login/'
LOGIN_REDIRECT_URL = '/common/main/'  # 로그인 성공 후 리다이렉트할 URL

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Celery
    'celery',
    'celery_progress',
    'django_celery_results',

    # Local apps
    'common',
    'data_monitoring',
    'production_management',
    'quality_control',
    'inventory_management',
    'workforce_management',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'common.middleware.UserLanguageMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = [
    ('en', _('English')),
    ('ko', _('Korean')),
    ('vn', _('Vietnamese')),
]

TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 로깅 설정
LOGGING = {
    'version': 1,   # version must be set to 1. This ensures current settings are preserved even when logging module is upgraded
    'disable_existing_loggers': False,  # If set to True, previously set loggers will not be used.
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
            'interval': 1,
            'filename': BASE_DIR / 'logs/website.log',
            'backupCount': 30,
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'qaa': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'ppm': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    }
}

# Celery Settings
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

CELERY_BROKER_URL = 'redis://localhost:6379'

# Email Backend Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'bsvmes.noti@gmail.com'
EMAIL_HOST_PASSWORD = 'vqaz lpmg kyfj urrd'

# Email Authentication
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Security Settings
SECURE_BROWSER_XSS_FILTER = True # Prevent XSS attacks by filtering out malicious content
SECURE_CONTENT_TYPE_NOSNIFF = True # Prevent MIME type sniffing
X_FRAME_OPTIONS = 'DENY' # Prevent clickjacking
CSRF_COOKIE_SECURE = True # Prevent CSRF attacks by ensuring cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True # Prevent session hijacking by ensuring cookies are only sent over HTTPS
SECURE_SSL_REDIRECT = True # Redirect all HTTP requests to HTTPS
SECURE_HSTS_SECONDS = 31536000  # HTTP Strict Transport Security (HSTS)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Include subdomains in HSTS policy
SECURE_HSTS_PRELOAD = True # Enable HSTS preloading

# Session Settings
SESSION_COOKIE_AGE = 1800  # Session timeout in seconds
SESSION_SAVE_EVERY_REQUEST = True # Save session data every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = True # Expire session at browser close

# Authentication Settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Default authentication backend
    'allauth.account.auth_backends.AuthenticationBackend', # Allauth authentication backend
]

# These pages are not required to be logged in to access
# Login Settings
LOGIN_REQUIRED_IGNORE_VIEW_NAMES = [
    'common:login', #   Login view
    'common:signup', # Signup view
    'common:password_reset', # Password reset view
]

# CSRF Settings
CSRF_COOKIE_HTTPONLY = True # Cookie should not be accessible to JavaScript
CSRF_USE_SESSIONS = True # Save CSRF token in session instead of cookie
CSRF_COOKIE_SAMESITE = 'Strict' # Cookie should only be sent from the same site